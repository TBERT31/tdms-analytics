openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - App
  /auth/login:
    get:
      description: Redirects to the authentication provider (Keycloak) for user login.
        This endpoint is only accessible to non-authenticated users.
      operationId: AuthController_login
      parameters: []
      responses:
        "302":
          description: Redirect to error page if login initiation fails
          headers:
            Location:
              description: Redirect URL
              schema:
                type: string
                example: /error?message=Could not initiate login
        "403":
          description: Forbidden - User is already authenticated
      summary: Initiate login process
      tags: &a1
        - Auth
  /auth/callback:
    get:
      description: Handles the OAuth callback from the authentication provider after
        successful login. This endpoint processes the authorization code and
        establishes the user session.
      operationId: AuthController_loginCallback
      parameters: []
      responses:
        "302":
          description: Redirects to the configured post-login redirect URI
          headers:
            Location:
              description: Post-login redirect URL
              schema:
                type: string
        "400":
          description: Bad Request - Invalid authorization code or OAuth parameters
        "401":
          description: Unauthorized - Authentication failed
      summary: OAuth callback endpoint
      tags: *a1
  /auth/signup:
    get:
      description: Redirects to the authentication provider (Keycloak) for user
        registration. This endpoint is only accessible to non-authenticated
        users.
      operationId: AuthController_signup
      parameters: []
      responses:
        "302":
          description: Redirect to error page if signup initiation fails
          headers:
            Location:
              description: Redirect URL
              schema:
                type: string
                example: /error?message=Could not initiate signup
        "403":
          description: Forbidden - User is already authenticated
      summary: Initiate signup process
      tags: *a1
  /auth/logout:
    get:
      description: Logs out the current user by destroying the session, clearing
        cookies, and redirecting to the authentication provider logout endpoint.
      operationId: AuthController_logout
      parameters: []
      responses:
        "302":
          description: Redirects to Keycloak logout page or configured post-logout URI
          headers:
            Location:
              description: Logout redirect URL
              schema:
                type: string
        "500":
          description: Internal Server Error - Error destroying session
      summary: Logout user
      tags: *a1
  /auth/check-session:
    get:
      operationId: AuthController_checkSession
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a1
  /users/me:
    get:
      operationId: UserController_user
      parameters: []
      responses:
        "200":
          description: Current user information
        "401":
          description: Unauthorized - User not authenticated
        "403":
          description: Forbidden - User does not have required authorizations
      security:
        - bearer: []
      summary: Get current user information
      tags:
        - Users
  /dataset/health:
    get:
      operationId: DatasetController_healthCheck
      parameters: []
      responses:
        "200":
          description: Service is healthy
      summary: Health check
      tags: &a2
        - Datasets
  /dataset/datasets:
    get:
      operationId: DatasetController_listDatasets
      parameters: []
      responses:
        "200":
          description: List of datasets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DatasetDto"
      summary: List all datasets
      tags: *a2
  /dataset/dataset_meta:
    get:
      operationId: DatasetController_getDatasetMeta
      parameters:
        - name: dataset_id
          required: true
          in: query
          description: Dataset UUID
          schema:
            type: string
      responses:
        "200":
          description: Dataset metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetMetaDto"
        "404":
          description: Dataset not found
      summary: Get dataset metadata
      tags: *a2
  /dataset/datasets/{datasetId}:
    delete:
      operationId: DatasetController_deleteDataset
      parameters:
        - name: datasetId
          required: true
          in: path
          description: Dataset UUID
          schema:
            type: string
      responses:
        "200":
          description: Dataset deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Dataset deleted successfully
        "404":
          description: Dataset not found
      summary: Delete a dataset
      tags: *a2
  /dataset/datasets/{datasetId}/channels:
    get:
      operationId: DatasetController_listChannels
      parameters:
        - name: datasetId
          required: true
          in: path
          description: Dataset UUID
          schema:
            type: string
      responses:
        "200":
          description: List of channels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChannelDto"
        "404":
          description: Dataset not found
      summary: List channels for a dataset
      tags: *a2
  /dataset/channels/{channelId}/time_range:
    get:
      operationId: DatasetController_getChannelTimeRange
      parameters:
        - name: channelId
          required: true
          in: path
          description: Channel UUID
          schema:
            type: string
      responses:
        "200":
          description: Channel time range
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeRangeDto"
        "404":
          description: Channel not found
      summary: Get channel time range
      tags: *a2
  /dataset/window:
    get:
      operationId: DatasetController_getWindow
      parameters:
        - name: channel_id
          required: true
          in: query
          description: UUID du canal
          schema:
            type: string
        - name: start
          required: false
          in: query
          description: ISO date si has_time
          schema:
            type: string
        - name: end
          required: false
          in: query
          description: ISO date si has_time
          schema:
            type: string
        - name: start_sec
          required: false
          in: query
          description: fenêtre relative en secondes
          schema:
            type: number
        - name: end_sec
          required: false
          in: query
          description: fenêtre relative en secondes
          schema:
            type: number
        - name: relative
          required: false
          in: query
          description: temps en secondes depuis le début
          schema:
            default: false
            type: boolean
        - name: points
          required: false
          in: query
          description: Nombre de points
          schema:
            minimum: 10
            maximum: 100000
            default: 2000
            type: number
        - name: method
          required: false
          in: query
          description: Méthode de downsampling
          schema:
            default: lttb
            type: string
            enum:
              - lttb
              - uniform
              - clickhouse
      responses:
        "200":
          description: Windowed sensor data (JSON or Arrow format)
      summary: Get windowed sensor data with downsampling
      tags: *a2
  /dataset/get_window_filtered:
    get:
      operationId: DatasetController_getWindowFiltered
      parameters:
        - name: channel_id
          required: true
          in: query
          description: UUID du canal
          schema:
            type: string
        - name: start_timestamp
          required: false
          in: query
          description: Timestamp Unix de début
          schema:
            type: number
        - name: end_timestamp
          required: false
          in: query
          description: Timestamp Unix de fin
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          description: Curseur temporel pour pagination
          schema:
            type: number
        - name: limit
          required: false
          in: query
          schema:
            minimum: 10000
            maximum: 1000000
            default: 250000
            type: number
        - name: points
          required: false
          in: query
          schema:
            minimum: 10
            maximum: 100000
            default: 2000
            type: number
        - name: method
          required: false
          in: query
          schema:
            default: lttb
            type: string
            enum:
              - lttb
              - uniform
              - clickhouse
      responses:
        "200":
          description: Filtered window data (JSON or Arrow format)
      summary: Get filtered and paginated window data
      tags: *a2
  /dataset/ingest:
    post:
      description: Streams the file directly to FastAPI backend without buffering in
        memory. This is optimized for very large files (GB to TB range) with
        minimal overhead.
      operationId: DatasetController_ingestTdmsFileStream
      parameters: []
      requestBody:
        required: true
        description: TDMS file to ingest
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: TDMS file (.tdms extension)
      responses:
        "200":
          description: File ingested successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IngestResponseDto"
        "400":
          description: Invalid file or Content-Type
        "408":
          description: Request timeout
        "500":
          description: Ingestion failed
      summary: Ingest TDMS file via streaming proxy (optimized for large files)
      tags: *a2
  /dataset/api/constraints:
    get:
      operationId: DatasetController_getApiConstraints
      parameters: []
      responses:
        "200":
          description: API constraints
          content:
            application/json:
              schema:
                type: object
                properties:
                  points_min:
                    type: number
                    example: 10
                  points_max:
                    type: number
                    example: 100000
                  default_points:
                    type: number
                    example: 2000
                  limit_min:
                    type: number
                    example: 10000
                  limit_max:
                    type: number
                    example: 1000000
                  default_limit:
                    type: number
                    example: 250000
                  chunk_size:
                    type: number
                    example: 500000
      summary: Get API constraints for frontend validation
      tags: *a2
info:
  title: EGIS - BFF
  description: Here the documentation of our API-GATEWAY
  version: 1.0.0
  contact: {}
tags:
  - name: Users
    description: User management endpoints
  - name: Auth
    description: Authentification management endpoints
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    DatasetDto:
      type: object
      properties:
        dataset_id:
          type: string
          description: Dataset UUID
        filename:
          type: string
          description: Original filename
        created_at:
          type: string
          description: Creation timestamp
        total_points:
          type: number
          description: Total number of points
      required:
        - dataset_id
        - filename
        - created_at
        - total_points
    DatasetMetaDto:
      type: object
      properties:
        dataset_id:
          type: string
          description: Dataset UUID
        filename:
          type: string
          description: Original filename
        channels:
          type: array
          description: List of channels
        total_channels:
          type: number
          description: Total number of channels
        total_points:
          type: number
          description: Total number of points
        created_at:
          type: string
          description: Creation timestamp
        storage:
          type: string
          description: Storage information
      required:
        - dataset_id
        - filename
        - channels
        - total_channels
        - total_points
        - created_at
        - storage
    ChannelDto:
      type: object
      properties:
        channel_id:
          type: string
          description: Channel UUID
        dataset_id:
          type: string
          description: Dataset UUID
        group_name:
          type: string
          description: Group name
        channel_name:
          type: string
          description: Channel name
        unit:
          type: string
          description: Unit of measurement
        has_time:
          type: boolean
          description: Has time data
        n_rows:
          type: number
          description: Number of rows
      required:
        - channel_id
        - dataset_id
        - group_name
        - channel_name
        - unit
        - has_time
        - n_rows
    TimeRangeDto:
      type: object
      properties:
        channel_id:
          type: string
          description: Channel UUID
        has_time:
          type: boolean
          description: Has time data
        min_timestamp:
          type: number
          description: Minimum timestamp
        max_timestamp:
          type: number
          description: Maximum timestamp
        min_iso:
          type: string
          description: Minimum ISO timestamp
        max_iso:
          type: string
          description: Maximum ISO timestamp
        min_index:
          type: number
          description: Minimum index
        max_index:
          type: number
          description: Maximum index
        total_points:
          type: number
          description: Total number of points
      required:
        - channel_id
        - has_time
        - total_points
    IngestResponseDto:
      type: object
      properties:
        dataset_id:
          type: string
          description: Dataset UUID
        filename:
          type: string
          description: Original filename
        channels_count:
          type: number
          description: Number of channels created
        channels:
          description: Channel metadata list
          type: array
          items:
            type: string
      required:
        - dataset_id
        - filename
        - channels_count
        - channels
